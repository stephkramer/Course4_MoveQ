# TODO - something is wrong here with the units!!!! check the crs warning online
hrBootstrap(my_fox,rep=5, level=99, unout="m2", plot=TRUE)
# TODO - something is wrong here with the units!!!! check the crs warning online
hrBootstrap(my_fox,rep=5, level=99, unout="ha", plot=TRUE)
# TODO - something is wrong here with the units!!!! check the crs warning online
hrBootstrap(my_fox,rep=5, level=99, unout="km2", plot=TRUE)
8e-05
as.numeric(8e-05)
8e-05*100000
cp <- mcp(mydf_sp_trans[,'daytime'], percent=95) # Minimum Convex Polygon (95%) per TierID # set unout
cp
cp <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%) per daytime # set unout
cp
cp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%)
cp_daytime
cp_month <- mcp(mydf_sp_trans[,'month'], percent=95, unout='km2') # MCP (95%)
cp_month
cp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%)
cp_daytime
plot(cp)
cp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%)
cp_daytime
plot(cp)
plot(mydf_sp_trans, add=TRUE, col= 'red')
cp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%)
cp_daytime
plot(cp)
plot(mydf_sp_trans, add=TRUE, col= as.numeric(mydf_sp_trans$daytime))
cp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%)
cp_daytime
plot(cp)
plot(mydf_sp_trans, add=TRUE, col= as.numeric(mydf_sp_trans$daytime)+1)
cp_daytime
cp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='m2') # MCP (95%)
cp_daytime
plot(cp)
plot(mydf_sp_trans, add=TRUE, col= as.numeric(mydf_sp_trans$daytime)+1)
cp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%)
cp_daytime
plot(cp)
plot(mydf_sp_trans, add=TRUE, col= as.numeric(mydf_sp_trans$daytime)+1)
str(cp_daytime)
mcp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%)
mcp_daytime
plot(mcp_daytime)
plot(mydf_sp_trans, add=TRUE, col= as.numeric(mydf_sp_trans$daytime)+1)
str(mcp_daytime)
str(mcp_daytime)
plot(mcp_daytime@polygons[1])
here()
mcp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%)
mcp_daytime
hrs <- mcp.area(mydf_sp_trans[,'daytime'], percent=seq(50, 100, by = 5),unout='km2')
hrs # home range size in km2 for the different MCP-levels
plot(mcp_daytime)
plot(mydf_sp_trans, add=TRUE, col= as.numeric(mydf_sp_trans$daytime)+1)
outmcp_daytime@polygons[1]
mcp_daytime@polygons[1]
str(mcp_daytime)
writeOGR(mcp_daytime, dsn=here(output,data-proc),
"mcp95_daytime_foxQ",'ESRI Shapefile',overwrite=T) #save as ESRI shapefile
here(output,data-proc)
str(mcp_daytime)
writeOGR(mcp_daytime, dsn=here('output','data-proc'),
"mcp95_daytime_foxQ",'ESRI Shapefile',overwrite=T) #save as ESRI shapefile
?hrBootstrap
# TODO - something is wrong here with the units!!!! check the crs warning online
hrBootstrap(mydf_sp_trans,rep=5, level=99, unout="km2", plot=TRUE)
kud <- kernelUD(mydf_sp_trans[,'daytime'], h="href") # calculate kernel with h="href",
?kernelUD
mydf_sp_trans
kud
kernel.area(kud,unout='km2')
homerange2 <- getverticeshr(kud,percent = 90)
homerange2
gArea(homerange2,byid=T)/1e6
kud$'1'@h
str(kud)
kud
kud$'1'@h
kernel.area(kud,unout='km2')
gArea(homerange2,byid=T)/1e6
image(kud[[1]])
title("Output of kernelUD")
xyz <- as.image.SpatialGridDataFrame(kud[[1]])
contour(xyz, add=TRUE)
vud <- getvolumeUD(kud)
image(vud[[1]])
title("Output of getvolumeUD")
xyzv <- as.image.SpatialGridDataFrame(vud[[1]])
contour(xyzv, add=TRUE)
points(anim_sp_5243, cex= 0.01, col='blue')
vud <- getvolumeUD(kud)
image(vud[[1]])
title("Output of getvolumeUD")
xyzv <- as.image.SpatialGridDataFrame(vud[[1]])
contour(xyzv, add=TRUE)
points(mydf_sp_trans, cex= 0.01, col='blue')
kud[[1]]
image(kud[[2]])
image(kud)
xyz <- as.image.SpatialGridDataFrame(kud)
contour(xyz, add=TRUE)
xyz <- as.image.SpatialGridDataFrame(kud[[1]])
contour(xyz, add=TRUE)
xy <- coordinates(kud[[1]])
z <- kud[[1]]@data$ud
df_kud <- data.frame(x=xy[,1],y=xy[,2],z=z)
#persp(x=df_kud$x, y=df_kud$y, z= df_kud$z)
#plot3d(x=xy[,1],y=xy[,2],z=z)
kud[[1]]@grid@cells.dim
r <- raster(ncols=60,nrows=58)
coordinates(df_kud) <- ~x + y
r_kud <- rasterize(df_kud,r,'z',fun=max)
myz <- matrix(z ,nrow= kud[[1]]@grid@cells.dim[[2]],
ncol= kud[[1]]@grid@cells.dim[[1]],byrow=F)
# image(myz)
kd.list <- list(x=xy[,1],y=xy[,2],z=myz)
# with(kd.list, plot_ly(x = x, y = y, z = z, type = "surface"))
plot_ly(z = myz, type = "surface") # click into plot and on icon 'turntable rotation' in plot upper right
?vud
?getvolumeUD
image(kud[[1]])
image(kud[[2]])
xyz <- as.image.SpatialGridDataFrame(kud[[2]])
contour(xyz, add=TRUE)
vud <- getvolumeUD(kud)
image(vud[[1]])
image(kud[[1]])
image(kud[[1]], col= viridis(100))
image(kud[[1]], col= terrain(100))
?viridis
anim_proc <- readRDS(file = here('output/data-proc/tag5334_gps_proc.Rds'))
# head(anim_proc)
# transform into spatial simple feature sf object
mydf_sf <- st_as_sf(x = data.frame(anim_proc),
coords = c("longitude", "latitude"),
crs = 4326,
sf_column_name = "geometry" )
# transform into SpatialPointsDataFrame  - for crosschecking
mydf_sp <- as(mydf_sf, "Spatial")
# transform CRS to projected one in meter distance units
mydf_sf_trans <-  st_transform(mydf_sf, 3035 )  # EPSG-code
mydf_sp_trans <-  spTransform(mydf_sp, CRS("+init=epsg:3035"))
tmap_mode(mode = "view")
tm_shape(shp = mydf_sf_trans)  + tm_dots(size = 0.01,
col = 'daytime',
alpha=0.5)
library(here) #for easy directory management
library(sp)
library(dismo)
library(raster)
library(GISTools)
library(rgdal)    # retiring end of 2023 -> use stars/ terra /sf
library(maptools) # retiring end of 2023 -> use sf
library(rgeos)    # retiring end of 2023 -> use sf
library(rgl)
library(rasterVis)
library(adehabitatHR)  #adehabitatLT  #adehabitatMA
library(sf)
library(move)
library(plotly)
library(circular)
library(dplyr)
library(tmap)
library(viridis)
library(gganimate)
library(ggplot2)
library(moveVis)
library(ggmap)
library(maps)
library(mapproj)
library(devtools)
library(lubridate)
library(here)
library(glue)
library(cowplot)
library(tidyverse)
library(Cairo)
library(colorspace)
library(ragg)
library(ggtext)
library(pdftools)
library(units)
library(ggplot2)
library(patchwork) # to combine plots
library(leaflet)
library(gower)
anim_proc <- readRDS(file = here('output/data-proc/tag5334_gps_proc.Rds'))
# head(anim_proc)
# transform into spatial simple feature sf object
mydf_sf <- st_as_sf(x = data.frame(anim_proc),
coords = c("longitude", "latitude"),
crs = 4326,
sf_column_name = "geometry" )
# transform into SpatialPointsDataFrame  - for crosschecking
mydf_sp <- as(mydf_sf, "Spatial")
# transform CRS to projected one in meter distance units
mydf_sf_trans <-  st_transform(mydf_sf, 3035 )  # EPSG-code
mydf_sp_trans <-  spTransform(mydf_sp, CRS("+init=epsg:3035"))
tmap_mode(mode = "view")
tm_shape(shp = mydf_sf_trans)  + tm_dots(size = 0.01,
col = 'daytime',
alpha=0.5)
####### TODO use transformed animal data for spatial measures! #####
####### WTF funktioniert das nicht???????   ########
# Ich wollte andere Koordinaten nehmen, weil unten hrBootstrap
# komische measures ausspuckt - viel zu kleine HRs
mydf_sf_trans$coords <- st_coordinates(mydf_sf_trans)
tt <- st_drop_geometry(mydf_sf_trans)
my_fox <- move(x = tt$coords.X, y = tt$coords.Y,
time=as.POSIXct(tt$start.timestamp,format="%Y-%m-%d %H:%M:%S"),
proj= CRS("+init=epsg:3035"),
data=tt,
animal="FoxQvonStralau")
my_fox <- move(x = anim_proc$longitude, y = anim_proc$latitude,
time=as.POSIXct(anim_proc$start.timestamp,format="%Y-%m-%d %H:%M:%S"),
proj= CRS("+init=epsg:4326"),
data=anim_proc,
animal="FoxQvonStralau")
# head(my_fox); nrow(my_fox)
timeLag(my_fox, unit = "mins")[1:5] # varies a lot, but minimum here 20 min
min(timeLag(my_fox, units="mins"))
mean(timeLag(my_fox, units="mins"))
max(timeLag(my_fox, units="mins"))
turnang <- angle(my_fox)
# turnang <- turnAngleGc(my_fox) # the same
# using the absolute abs(), because -180 and 180 has similar meaning:
# the animal keeps the direction
hist(abs(turnang))
steplength <- distance(my_fox) # know your units!
hist(steplength)
max(steplength) # max 1 km in 20 min = 3 km / h
hist(speed(my_fox)) # units? -> check ?speed
# TODO - something is wrong here with the units!!!! check the crs warning online
hrBootstrap(my_fox,rep=5, level=99, unout="m2", plot=TRUE) #it is ha, not m2
?hrBootstrap
mcp_daytime <- mcp(mydf_sp_trans[,'daytime'], percent=95, unout='km2') # MCP (95%)
mcp_daytime # area for both (daytime separated) polygons
hrs <- mcp.area(mydf_sp_trans[,'daytime'], percent=seq(50, 100, by = 5),unout='km2')
hrs # home range size in km2 for the different MCP-levels
plot(mcp_daytime)
plot(mydf_sp_trans, add=TRUE, col= as.numeric(mydf_sp_trans$daytime)+1)
mcp_month <- mcp(mydf_sp_trans[,'month'], percent=95, unout='km2') # MCP (95%)
mcp_month
writeOGR(mcp_daytime, dsn=here('output','data-proc'),
"mcp95_daytime_foxQ",'ESRI Shapefile',overwrite=T) # save as ESRI shapefile
kud <- kernelUD(mydf_sp_trans[,'daytime'], h="href") # calculate kernel with h="href"
# the output is an object with lists, accessed via: str(kud)
kernel.area(kud, unout='km2') # across all levels 5-95%
kud90 <- getverticeshr(kud,percent = 90) # this creates the spatial object, units m2
gArea(kud90,byid=T)/1e6                  # units km2
# plot only the nighttime
image(kud[[1]], col= viridis(100, direction = -1))
xyz <- as.image.SpatialGridDataFrame(kud[[1]])
contour(xyz, add=TRUE)
points(mydf_sp_trans, cex= 0.01, col='red')
# save it as shapefile - mind - here we can only save one contour line,
# in this case the 90% kernel:
writeOGR(kud90, dsn=here('output','data-proc'),
layer="kernel_ud90",'ESRI Shapefile',overwrite=T)
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
plot(kernel_ud90_sf$id)
image(kud[[1]], col= viridis(100, direction = -1))
# plot only the nighttime
image(kud[[1]], col= viridis(100, direction = -1), ylim=c(52.1,52.2))
xyz <- as.image.SpatialGridDataFrame(kud[[1]])
contour(xyz, add=TRUE)
points(mydf_sp_trans, cex= 0.01, col='red')
# save it as shapefile - mind - here we can only save one contour line,
# in this case the 90% kernel:
writeOGR(kud90, dsn=here('output','data-proc'),
layer="kernel_ud90",'ESRI Shapefile',overwrite=T)
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
plot(kernel_ud90_sf$id)
# plot only the nighttime
image(kud[[1]], col= viridis(100, direction = -1), ylim=c(52.1,52.2))
xyz <- as.image.SpatialGridDataFrame(kud[[1]])
contour(xyz, add=TRUE)
points(mydf_sp_trans, cex= 0.01, col='red')
# save it as shapefile - mind - here we can only save one contour line,
# in this case the 90% kernel:
writeOGR(kud90, dsn=here('output','data-proc'),
layer="kernel_ud90",'ESRI Shapefile',overwrite=T)
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
plot(kernel_ud90_sf$id)
kernel_ud90_sf
sf::plot(kernel_ud90_sf$id)
kernel_ud90_sf$id
# save it as shapefile - mind - here we can only save one contour line,
# in this case the 90% kernel:
writeOGR(kud90, dsn=here('output','data-proc'),
layer="kernel_ud90",'ESRI Shapefile',overwrite=T)
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
plot(kernel_ud90_sf[,id)
# save it as shapefile - mind - here we can only save one contour line,
# in this case the 90% kernel:
writeOGR(kud90, dsn=here('output','data-proc'),
layer="kernel_ud90",'ESRI Shapefile',overwrite=T)
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
plot(kernel_ud90_sf[,id])
# plot only the nighttime
image(kud[[1]], col= viridis(100, direction = -1), ylim=c(52.1,52.2))
xyz <- as.image.SpatialGridDataFrame(kud[[1]])
contour(xyz, add=TRUE)
points(mydf_sp_trans, cex= 0.01, col='red')
# plot only the nighttime
image(kud[[1]], col= viridis(100, direction = -1))
xyz <- as.image.SpatialGridDataFrame(kud[[1]])
contour(xyz, add=TRUE)
points(mydf_sp_trans, cex= 0.01, col='red')
# save it as shapefile - mind - here we can only save one contour line,
# in this case the 90% kernel:
writeOGR(kud90, dsn=here('output','data-proc'),
layer="kernel_ud90",'ESRI Shapefile',overwrite=T)
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
plot(kernel_ud90_sf[,id])
kernel_ud90_sf
# save it as shapefile - mind - here we can only save one contour line,
# in this case the 90% kernel:
writeOGR(kud90, dsn=here('output','data-proc'),
layer="kernel_ud90",'ESRI Shapefile',overwrite=T)
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
plot(kernel_ud90_sf[,'id'])
# save it as shapefile - mind - here we can only save one contour line,
# in this case the 90% kernel:
writeOGR(kud90, dsn=here('output','data-proc'),
layer="kernel_ud90",'ESRI Shapefile',overwrite=T)
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
# note: the CRS is not defined! So assign it:
st_crs(kernel_ud90_sf) <- 3035
plot(kernel_ud90_sf[,'id'])
points(mydf_sp_trans, cex= 0.01, col='red')
plot(kernel_ud90_sf[,'id'])
points(mydf_sf_trans, cex= 0.01, col='red')
kernel_ud90_sf
coordinates(mydf_sp_trans)
plot(mydf_sf_trans)
plot(kernel_ud90_sf[,'id'])
points(mydf_sp_trans[,1], cex= 0.01, col='red')
plot(kernel_ud90_sf[,'id'])
points(mydf_sf_trans[,1], cex= 0.01, col='red') # TODO - wiesooooooo??????? die Punkte
plot(kernel_ud90_sf[,'id'])
plot(mydf_sf_trans[,1], cex= 0.01, col='red') # TODO - wiesooooooo??????? die Punkte
plot(kernel_ud90_sf[,'id'])
plot(mydf_sf_trans[,1], cex= 0.01, col='red',add=TRUE) # TODO - wiesooooooo??????? die
ggplot() +
geom_sf(kernel_ud90_sf)
ggplot(data = kernel_ud90_sf) +
geom_sf() +
geom_sf(data = mydf_sf_trans, size = 4, shape = 23, fill = "darkred")
ggplot(data = kernel_ud90_sf) +
geom_sf() +
geom_sf(data = mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(data = kernel_ud90_sf) +
geom_sf() +
geom_sf(data = mydf_sf_trans, size = 1, shape = 23, fill = "darkred", color='daytime')
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
mcp95_sf       <- st_read(dsn=here('output','data-proc'),layer="mcp95_daytime_foxQ")
# note: the CRS is lost and not defined! So assign it again:
st_crs(kernel_ud90_sf) <- 3035
ggplot(data = kernel_ud90_sf) +
geom_sf() +
geom_sf(data = mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(data = kernel_ud90_sf) +
geom_sf() +
geom_sf(mcp95_sf, border='red') +
geom_sf(data = mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(data = kernel_ud90_sf) +
geom_sf() +
geom_sf(mcp95_sf, aes(fill = AREA)) +
geom_sf(data = mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot() +
geom_sf(kernel_ud90_sf) +
geom_sf(mcp95_sf, aes(fill = AREA)) +
geom_sf(data = mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot() +
geom_sf(kernel_ud90_sf) +
geom_sf(mcp95_sf) +
geom_sf(data = mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot() +
geom_sf(kernel_ud90_sf) +
geom_sf(mcp95_sf,colour = "red", fill = NA) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot() +
geom_sf(kernel_ud90_sf) +
# geom_sf(mcp95_sf,colour = "red", fill = NA) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot() +
geom_sf(kernel_ud90_sf) +
# geom_sf(mcp95_sf,colour = "red", fill = NA) +
# geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot() +
geom_sf(kernel_ud90_sf)# +
# geom_sf(mcp95_sf,colour = "red", fill = NA) +
# geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(kernel_ud90_sf) +
geom_sf() +
geom_sf(mcp95_sf,colour = "red", fill = NA) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(kernel_ud90_sf) +
geom_sf() +
#geom_sf(mcp95_sf,colour = "red", fill = NA) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(data=kernel_ud90_sf) +
geom_sf() +
#geom_sf(mcp95_sf,colour = "red", fill = NA) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# make the crosscheck: load and plot
kernel_ud90_sf <- st_read(dsn=here('output','data-proc'),layer="kernel_ud90")
mcp95_sf       <- st_read(dsn=here('output','data-proc'),layer="mcp95_daytime_foxQ")
# note: the CRS is lost and not defined! So assign it again:
st_crs(kernel_ud90_sf) <- 3035
st_crs(mcp95_sf)       <- 3035
ggplot(data=kernel_ud90_sf) +
geom_sf() +
#geom_sf(mcp95_sf,colour = "red", fill = NA) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(data=kernel_ud90_sf) +
geom_sf()
ggplot(data=kernel_ud90_sf) +
geom_sf() +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(data=kernel_ud90_sf) +
geom_sf() +
#geom_sf(mcp95_sf,colour = "red", fill = NA) +
geom_point(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(data=kernel_ud90_sf) +
geom_sf(aes(fill = AREA)) +
#geom_sf(mcp95_sf,colour = "red", fill = NA) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(data=kernel_ud90_sf) +
geom_sf(aes(fill = AREA))
ggplot(data=kernel_ud90_sf) +
geom_sf(aes(borders = 'black')) +
#geom_sf(mcp95_sf,colour = "red", fill = NA) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
ggplot(data=kernel_ud90_sf) +
geom_sf() +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten
ggplot() +
geom_sf(kernel_ud90_sf) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten
ggplot() +
geom_sf(kernel_ud90_sf) +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten
ggplot(kernel_ud90_sf) +
geom_sf() +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten
ggplot(kernel_ud90_sf) +
# geom_sf() +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten, also mcp, kernel, punkte
ggplot(kernel_ud90_sf) +
geom_sf() +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
library(ggplot2)
# TODO eigentlich wollte ich alles übereinander plotten, also mcp, kernel, punkte
ggplot(kernel_ud90_sf) +
geom_sf() +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# transform CRS to projected one in meter distance units
mydf_sf_trans <-  st_transform(mydf_sf, 3035 )  # EPSG-code
mydf_sp_trans <-  spTransform(mydf_sp, CRS("+init=epsg:3035"))
# TODO eigentlich wollte ich alles übereinander plotten, also mcp, kernel, punkte
ggplot(kernel_ud90_sf) +
geom_sf() +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten, also mcp, kernel, punkte
ggplot(kernel_ud90_sf) +
geom_sf() +
geom_point(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten, also mcp, kernel, punkte
ggplot(kernel_ud90_sf) +
geom_sf(kernel_ud90_sf) +
geom_point(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten, also mcp, kernel, punkte
ggplot() +
geom_sf(kernel_ud90_sf) +
geom_point(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten, also mcp, kernel, punkte
ggplot() +
geom_sf(kernel_ud90_sf) +
geom_point(mydf_sf_trans, aes(),size = 1, shape = 23, fill = "darkred")
ggplot() +
geom_sf(kernel_ud90_sf)
ggplot(kernel_ud90_sf) +
geom_sf()
ggplot(kernel_ud90_sf) +
geom_sf() +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten, also mcp, kernel, punkte
ggplot(kernel_ud90_sf) +
geom_sf() #+
# geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
# TODO eigentlich wollte ich alles übereinander plotten, also mcp, kernel, punkte
ggplot(kernel_ud90_sf) +
geom_sf() +
geom_sf(mydf_sf_trans, size = 1, shape = 23, fill = "darkred")
