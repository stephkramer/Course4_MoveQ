library(sf)
library(terra)
## for telemetry analyses
library(move)
library(adehabitatHR)
?PROJ
here()
# Define workspace and folder structure
work_wd <- here()
data-raw_wd <- here('data-raw')
geo-raw_wd  <- here('data-raw','geo-raw')
output_wd   <- here('output')
work_wd <- here()
work_wd
here('data-raw')
# Define workspace and folder structure
work_wd <- here()
data-raw_wd <- here('data-raw')
geo-raw_wd  <- here('data-raw','geo-raw')
output_wd   <- here('output')
# Define workspace and folder structure
work_wd <- here()
data-raw_wd <- here('data-raw')
geo-raw_wd  <- here('data-raw/geo-raw')
output_wd   <- here('output')
# Define workspace and folder structure
work_wd <- here()
data-raw_wd <- here('data-raw')
geo-raw_wd  <- here('data-raw/geo-raw')
output_wd   <- here('output')
# Define workspace and folder structure
work_wd <- here()
data_raw_wd <- here('data-raw')
geo_raw_wd  <- here('data-raw/geo-raw')
output_wd   <- here('output')
animls <- st_read("DieTiere.shp", layer="DieTiere",dsn=data_raw_wd)
lndcov <- st_read("Landnutzung.shp", layer="Landnutzung", dsn=geo_raw_wd)
rivers <- st_read("linearegew.shp", layer="linearegew", dsn=geo_raw_wd)
kettl  <- read.table(paste0(data_raw_wd,'/KettleHoles.txt'), header=TRUE, sep='\t')
# convert to spatial objects
head(Kettl); class(Kettl)  # data.frame
# convert txt-file to SpatialPointsDataFrsf-Object
kettl_sf <- st_as_sf(x = data.frame(kettl),
coords = c("MyX", "MyY"),
crs = 4326,
sf_column_name = "geometry")
coordinates(Kettl) <- ~MyX + MyY
head(Kettl); class(Kettl) # ok
?st_read
animls <- st_read(layer="DieTiere",dsn=data_raw_wd)
lndcov <- st_read("Landnutzung.shp", layer="Landnutzung", dsn=geo_raw_wd)
rivers <- st_read("linearegew.shp", layer="linearegew", dsn=geo_raw_wd)
kettl  <- read.table(paste0(data_raw_wd,'/KettleHoles.txt'), header=TRUE, sep='\t')
animls <- st_read(dsn=data_raw_wd,layer="DieTiere")
data_raw_wd
list.files(data_raw_wd)
animls <- st_read(dsn=data_raw_wd,layer="DieTiere_32633")
list.files(geo_raw_wd)
animls <- st_read(dsn=data_raw_wd,layer="DieTiere_32633")
lndcov <- st_read(layer="Landnutzung_3035", dsn=geo_raw_wd)
rivers <- st_read(layer="linearegew_32633", dsn=geo_raw_wd)
kettle <- read.table(paste0(data_raw_wd,'/KettleHoles.txt'), header=TRUE, sep='\t')
head(kettle); class(kettle)
lndcov
animls
# if you are not sure about the file names, check the folder content with
# list.files(data_raw_wd)
animals <- st_read(dsn=data_raw_wd,layer="DieTiere_32633")
landcov <- st_read(layer="Landnutzung_3035", dsn=geo_raw_wd)
rivers  <- st_read(layer="linearegew_32633", dsn=geo_raw_wd)
st_transform(landcov, 32633)
landcov
lc_32633 <- st_transform(landcov, 32633)
lc_32633
lc_32633 <- st_transform(landcov, 32633)
identicalCRS(lc_32633,animals)
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
plot(lc_32633[lc_32633$NS1 == 1,],col= mycol[1],border='transparent')
plot(lc_32633[lc_32633$NS1 == 2,],col= mycol[2],border='transparent',add=T)
plot(lc_32633[lc_32633$NS1 == 3,],col= mycol[3],border='transparent',add=T)
plot(lc_32633[lc_32633$NS1 == 4,],col= mycol[4],border='transparent',add=T)
plot(lc_32633[lc_32633$NS1 == 5,],col= mycol[5],border='transparent',add=T)
plot(animals,pch=animals[[1]],add=T) ###oops-where are they??
plot(rivers, col= 'blue', lwd=0.1,add=T)
plot(lc_32633)
plot(lc_32633[lc_32633$NS1 == 1,1],col= mycol[1],border='transparent')
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
plot(lc_32633[lc_32633$NS1 == 1,1],col= mycol[1],border='transparent')
plot(lc_32633[lc_32633$NS1 == 2,1],col= mycol[2],border='transparent',add=T)
plot(lc_32633[lc_32633$NS1 == 3,1],col= mycol[3],border='transparent',add=T)
plot(lc_32633[lc_32633$NS1 == 4,1],col= mycol[4],border='transparent',add=T)
plot(lc_32633[lc_32633$NS1 == 5,1],col= mycol[5],border='transparent',add=T)
plot(animals,pch=animals[[1]],add=T) ###oops-where are they??
plot(rivers, col= 'blue', lwd=0.1,add=T)
plot(lc_32633[lc_32633$NS1 == 2,1],col= mycol[2],border='transparent',add=T)
plot(lc_32633[lc_32633$NS1 == 1],col= mycol[1],border='transparent')
head(lc_32633)
plot(lc_32633[,'NS1']
)
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
plot(lc_32633[,'NS1'], col=mycol)
plot(lc_32633[,'NS1'], col=mycol[lc_32633[,'NS1']])
plot(lc_32633[,'NS1'], col=mycol[lc_32633$NS1])
lc_union <- st_union(lc_32633$NS1)
?st_combine
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
plot(lc_32633[,'NS1'], col=mycol[lc_32633$NS1],border='transparent')
plot(animals,pch=animals[[1]],add=T)
plot(rivers, col= 'blue', lwd=0.1,add=T)
animals
lc_32633
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
plot(lc_32633[,'NS1'], col=mycol[lc_32633$NS1],border='transparent')
points(animals,col='black')
plot(rivers, col= 'blue', lwd=0.1,add=T)
animals
plot(animals)
plot(lc_32633[,'NS1'], col=mycol[lc_32633$NS1],border='transparent')
plot(animals[,1],col='black')
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
plot(lc_32633[,'NS1'], col=mycol[lc_32633$NS1],border='transparent')
plot(animals[,1],col='black',add=TRUE)
rivers
lc_32633
plot(animals[,1],col='black')
plot(rivers, col= 'blue', lwd=0.1)
plot(lc_32633[,'NS1'], col=mycol[lc_32633$NS1],border='transparent')
plot(animals[,1],col='black',add=TRUE)
plot(rivers[,1], col= 'blue', lwd=0.1,add=T)
plot(rivers[,1], col= 'blue', lwd=0.1)
plot(animals[,1],col=animals$ID,add=TRUE)
sf::plot(animals[,1],col=animals$ID,add=TRUE)
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633[,'NS1']) +
geom_sf(aes(color = mycol)
)
library(ggplot2)
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633[,'NS1']) +
geom_sf(aes(color = mycol)
)
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633[,'NS1']) +
geom_sf(aes(colour = mycol[lc_32633$NS1])
)
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633[,'NS1']) +
geom_sf(aes(fill  = mycol[lc_32633$NS1])
)
animals[,1]
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633[,'NS1']) +
geom_sf(lc_32633, aes(fill  = mycol[lc_32633$NS1]))
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633) +
geom_sf(data=lc_32633, aes(fill  = mycol[lc_32633$NS1]))
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633) +
geom_sf(data=lc_32633, aes(fill  = mycol[NS1]))
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633) +
geom_sf(data=lc_32633, aes(fill  = mycol[NS1])) +
geom_sf(data=animals)
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633) +
geom_sf(data=lc_32633, aes(fill  = mycol[NS1])) +
geom_sf(data=animals) +
geom_sf(rivers, col= 'blue')
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
ggplot(lc_32633) +
geom_sf(data=lc_32633, aes(fill  = mycol[NS1])) +
geom_sf(data=animals) +
geom_sf(rivers)
rivers
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
# TODO - plot
ggplot(lc_32633) +
geom_sf(data=lc_32633, aes(fill  = mycol[NS1])) +
geom_sf(data=animals) +
geom_sf(data=rivers) +
theme_classic()
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
# TODO - plot
ggplot(lc_32633) +
geom_sf(data=lc_32633, aes(fill  = mycol[NS1]), borders='transparent') +
geom_sf(data=animals) +
geom_sf(data=rivers, borders='blue') +
theme_classic()
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
# TODO - plot
ggplot(lc_32633) +
geom_sf(data=lc_32633, aes(fill  = mycol[NS1]), border='transparent') +
geom_sf(data=animals) +
geom_sf(data=rivers, border='blue') +
theme_classic()
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
# TODO - plot
ggplot(lc_32633) +
geom_sf(data=lc_32633, aes(fill  = mycol[NS1]), color='transparent') +
geom_sf(data=animals) +
geom_sf(data=rivers, color='blue') +
theme_classic()
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
# TODO - plot
ggplot(lc_32633) +
geom_sf(data=lc_32633[,'NS1'], aes(fill  = mycol[NS1]), color='transparent') +
geom_sf(data=animals) +
geom_sf(data=rivers, color='blue') +
theme_classic()
library(tmap)
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
tmap_mode(mode = "view")
tm_shape(shp = lc_32633[,'NS1']) +
tm_polygons(col = "NS1", palette = mycol)
animals
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
myid  <- c('yellow','pink','blue')
tmap_mode(mode = "view")
tm_shape(shp = lc_32633[,'NS1']) +
tm_polygons(col = "NS1", palette = mycol) +
tm_shape(shp = animals[,'ID']) +
tm_polygons(col = "ID", palette = myid) +
tm_shape(shp = rivers[,1]) +
tm_polygons(col = 'blue')
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
myid  <- c('yellow','pink','blue')
tmap_mode(mode = "view")
tm_shape(shp = lc_32633[,'NS1']) +
tm_polygons(col = "NS1", palette = mycol) +
tm_shape(shp = animals[,'ID']) +
tm_points(col = "ID", palette = myid) +
tm_shape(shp = rivers[,1]) +
tm_polygons(col = 'blue')
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
myid  <- c('yellow','pink','blue')
tmap_mode(mode = "view")
tm_shape(shp = lc_32633[,'NS1']) +
tm_polygons(col = "NS1", palette = mycol) +
tm_shape(shp = animals[,'ID']) +
tm_dots(col = "ID", palette = myid) +
tm_shape(shp = rivers[,1]) +
tm_lines(col = 'blue')
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
myid  <- c('yellow','pink','fuchsia')
tmap_mode(mode = "view")
tm_shape(shp = lc_32633[,'NS1']) +
tm_polygons(col = "NS1", palette = mycol) +
tm_shape(shp = animals[,'ID']) +
tm_dots(col = "ID", palette = myid) +
tm_shape(shp = rivers[,1]) +
tm_lines(col = 'blue')
#Create a color code for the 5 land use classes
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
myid  <- c('yellow','pink','red')
tmap_mode(mode = "view")
tm_shape(shp = lc_32633[,'NS1']) +
tm_polygons(col = "NS1", palette = mycol) +
tm_shape(shp = animals[,'ID']) +
tm_dots(col = "ID", palette = myid) +
tm_shape(shp = rivers[,1]) +
tm_lines(col = 'blue')
mcp <- mcp(Tiere[,'ID'], percent=95)
mcp <- mcp(animals[,'ID'], percent=95)
class(animals)
animals_sp <-as(animals, "Spatial")
mcp <- mcp(animals_sp[,'ID'], percent=95)
plot(mcp)
plot(animals_sp, add=TRUE, col= Tiere$ID)
animals_sp$ID
# for using mcp() in {adehabitatHR}, convert to SpatialPointsDataframe of {sp}
animals_sp <-as(animals, "Spatial")
mcp <- mcp(animals_sp[,'ID'], percent=95)
plot(mcp)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
writePolyShape(mcp, paste(output_wd,"/mcp95_animal_32633",sep=''))# another save command
animals
?move
st_coordinates(animals)
anim_coords <- st_coordinates(animals)
anim_coords$X
str(anim_coords)
anim_coords[,1]
anim_coords[[1]]
anim_coords[[,1]]
anim_coords
str(anim_coords)
as.data.frame(anim_coords)
anim_coords <- as.data.frame(st_coordinates(animals)) #returns a list
class(anim_coords)
anim_coords$X
anim_coords <- as.data.frame(st_coordinates(animals)) #returns a list
animals$X <- anim_coords$X
animals$Y <- anim_coords$Y
animals
animals_ng <- st_drop_geometry(animals)
animals_ng
animals_move <- move(x=animals_ng$X, y=animals_ng$X,
time = as.POSIXct(animals_ng$MYDATUM,
format = "%Y-%m-%d 8:0:0", tz="CET"),
proj=CRS("+init=epsg:32633"),
data=animals_ng, animal = animals_ng$ID, sensor='GPS')
plot(animals_move)
animals_move <- move(x=animals_ng$X, y=animals_ng$Y,
time = as.POSIXct(animals_ng$MYDATUM,
format = "%Y-%m-%d 8:0:0", tz="CET"),
proj=CRS("+init=epsg:32633"),
data=animals_ng, animal = animals_ng$ID, sensor='GPS')
plot(animals_move)
plot(animals_move, type='line')
?move
plot(animals_move, type='l')
steplength <- distance(animals_move)
steplength
mean_steplength <- mean(distance(animals_move))
mean(distance(animals_move))
mean_steplength <- mean(distance(animals_move),na.rm=TRUE)
distance(animals_move)
steplength_per_animal <- distance(animals_move)
lapply(steplength_per_animal,mean)
mean_stepl_p_anim <- lapply(steplength_per_animal,mean)
unlist(mean_stepl_p_anim)
mean(unlist(mean_stepl_p_anim))
?writePolyShape
??writePolyShape
st_buffer
?st_buffer
?gBuffer
?gbuffer
mcp_sf  <- as(mcp, "sf")
mcp_buf <- st_buffer(mcp_sf, 300)
plot(mcp)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp_buf, add=TRUE)
plot(mcp, alpha= 0.7)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp_buf, alpha=0.7,add=TRUE)
plot(mcp, alpha= 0.7)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp_buf)
plot(mcp)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp_buf[,1], alpha=0.7,add=TRUE)
plot(mcp_buf[,1])
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp, add=T)
plot(mcp)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp_buf[,1], add=TRUE)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp,add=TRUE)
plot(lc_32633[,'NS1'], col=mycol[lc_32633$NS1],border='transparent')
plot(animals[,1],col=animals$ID,add=TRUE)
plot(rivers[,1], col= 'blue', lwd=0.1,add=T)
# for using mcp() in {adehabitatHR}, convert to SpatialPointsDataframe of {sp}
animals_sp <-as(animals, "Spatial")
mcp <- mcp(animals_sp[,'ID'], percent=95)
# the buffer command needs however an sf object
mcp_sf  <- as(mcp, "sf")
mcp_buf <- st_buffer(mcp_sf, 300)
# the plot is correct
plot(mcp)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp_buf[,1], add=TRUE)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp, add=TRUE)
# save buffer
st_write(obj = mcp_buf,
dsn = output_wd,
layer = mcp_buffer_32633,
driver = 'ESRI Shapefile',
delete_layer = TRUE)
# for using mcp() in {adehabitatHR}, convert to SpatialPointsDataframe of {sp}
animals_sp <-as(animals, "Spatial")
mcp <- mcp(animals_sp[,'ID'], percent=95)
# the buffer command needs however an sf object
mcp_sf  <- as(mcp, "sf")
mcp_buf <- st_buffer(mcp_sf, 300)
# the plot is correct
plot(mcp)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp_buf[,1], add=TRUE)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp, add=TRUE)
# save buffer
st_write(obj = mcp_buf,
dsn = output_wd,
layer = mcp_buffer_32633.shp,
driver = 'ESRI Shapefile',
delete_layer = TRUE)
# for using mcp() in {adehabitatHR}, convert to SpatialPointsDataframe of {sp}
animals_sp <-as(animals, "Spatial")
mcp <- mcp(animals_sp[,'ID'], percent=95)
# the buffer command needs however an sf object
mcp_sf  <- as(mcp, "sf")
mcp_buf <- st_buffer(mcp_sf, 300)
# the plot is correct
plot(mcp)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp_buf[,1], add=TRUE)
plot(animals_sp, add=TRUE, col= animals_sp$ID)
plot(mcp, add=TRUE)
# save buffer
st_write(obj = mcp_buf,
dsn = output_wd,
layer = 'mcp_buffer_32633',
driver = 'ESRI Shapefile',
delete_layer = TRUE)
mcp_buf_lc <- st_intersection(lc_32633, mcp_buf)
mcp_buf_lc
tapply(mcp_buf_lc$AREA,c('NS1','id'),sum)
tapply(mcp_buf_lc$AREA,mcp_buf_lc$id,sum)
st_area(mcp_buf)
st_area(mcp_buf)/1e6
buf_area <- st_area(mcp_buf)/1e6
buf_area
buf_area[2]
tapply(mcp_buf_lc$AREA,mcp_buf_lc$id,sum)
tapply(mcp_buf_lc$AREA[mcp_buf_lc$NS1 == 1],mcp_buf_lc$id[mcp_buf_lc$NS1 == 1],sum)
tapply(mcp_buf_lc$AREA[mcp_buf_lc$NS1 == 1],mcp_buf_lc$id[mcp_buf_lc$NS1 == 1],sum)/1e6
tapply(mcp_buf_lc$AREA[mcp_buf_lc$NS1 == 2],mcp_buf_lc$id[mcp_buf_lc$NS1 == 2],sum)/1e6
tapply(mcp_buf_lc$AREA[mcp_buf_lc$NS1 == 2],mcp_buf_lc$id[mcp_buf_lc$NS1 == 2],sum)/1e6
tapply(mcp_buf_lc$AREA[mcp_buf_lc$NS1 == 3],mcp_buf_lc$id[mcp_buf_lc$NS1 == 3],sum)/1e6
buf_area
st_area(mcp_buf_lc)
st_area(mcp_buf_lc)/1e6
mcp_buf_lc
st_area(mcp_buf_lc)
tapply(mcp_buf_lc$AREA[mcp_buf_lc$NS1 == 2],mcp_buf_lc$id[mcp_buf_lc$NS1 == 2],sum)
mcp_buf_lc
mcp_buf_lc <- st_intersection(lc_32633, mcp_buf)
# have a look at the object:
mcp_buf_lc
st_area(mcp_buf_lc[1,])
mcp_buf_lc$areakm2 <- st_area(mcp_buf_lc)
mcp_buf_lc
mcp_buf_lc$areakm2 <- st_area(mcp_buf_lc)/1e6
mcp_buf_lc
tapply(mcp_buf_lc$areakm2[mcp_buf_lc$NS1 == 2],mcp_buf_lc$id[mcp_buf_lc$NS1 == 2],sum)/1e6
tapply(mcp_buf_lc$areakm2[mcp_buf_lc$NS1 == 3],mcp_buf_lc$id[mcp_buf_lc$NS1 == 3],sum)/1e6
agri/buf_area
agri   <- tapply(mcp_buf_lc$areakm2[mcp_buf_lc$NS1 == 2],
mcp_buf_lc$id[mcp_buf_lc$NS1 == 2],sum)/1e6
forest <- tapply(mcp_buf_lc$areakm2[mcp_buf_lc$NS1 == 3],
mcp_buf_lc$id[mcp_buf_lc$NS1 == 3],sum)/1e6
agri/buf_area
agri/buf_area*100
forest/buf_area*100
buf_area
agri
forest
agri   <- tapply(mcp_buf_lc$areakm2[mcp_buf_lc$NS1 == 2],
mcp_buf_lc$id[mcp_buf_lc$NS1 == 2],sum)
forest <- tapply(mcp_buf_lc$areakm2[mcp_buf_lc$NS1 == 3],
mcp_buf_lc$id[mcp_buf_lc$NS1 == 3],sum)
agri
forest
agri/buf_area*100
forest/buf_area*100
round((agri/buf_area*100),2)
round((agri/buf_area*100),0)
round((forest/buf_area*100),0)
spatjoin <- over(animals,lc_32633)
spatjoin <- over(animals_sp,lc_32633)
st_join(animals,lc_32633)
myres <- table(spatjoin$NS1,spatjoin$ID)
myres
spatjoin <- st_join(animals,lc_32633)
myres <- table(spatjoin$NS1,spatjoin$ID)
myres
spatjoin <- st_join(animals,lc_32633)
myres <- table(spatjoin$NS1,spatjoin$ID)
myres
# now divide that by the toal number of locations per animal
table(animals$ID)
spatjoin <- st_join(animals,lc_32633)
myres <- table(spatjoin$NS1,spatjoin$ID)
myres
# now divide that by the toal number of locations per animal
myn <- table(animals$ID)
myres/myn
myres[1,]/myn
round((myres[1,]/myn*100),0)
round((myres[1,]/myn*100),0)  # agriculture
round((myres[2,]/myn*100),0)  # forest
round((agri/buf_area*100),0)
round((forest/buf_area*100),0)
round((myres[1,]/myn*100),0)  # agriculture
round((myres[2,]/myn*100),0)  # forest
