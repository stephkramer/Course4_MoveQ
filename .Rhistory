radii.scale = "linear")
rose.diag(timetoplot, bin=24, col="blue",
main="Events by Hour (sqrt scale)", prop=3)
# with ggplot
ggplot(dat_anim_na,aes(x=hour,fill=daytime))+
geom_bar(breaks=seq(0,24),width = 2,colour="grey")+
coord_polar(start=0)+
theme_minimal()+
scale_fill_brewer()+
ylab("Count")+
ggtitle("Events by Time of day")+
scale_x_continuous("", limits=c(0,24),
breaks=seq(0,24),
labels=seq(0,24))
# R data file - can only be opened/ read with R by using function load()
save(dat_anim_na, file = here('output/data-proc/tag5334_gps_proc.rda'))
# interchange file format .csv
write.csv(dat_anim_na, file = here('output/data-proc/tag5334_gps_proc.csv'))
animal <- load(file = here('output/data-proc/tag5334_gps_proc.rda'))
animal
rm(dat_anim_na)
dat_anim_na
load(file = here('output/data-proc/tag5334_gps_proc.rda'))
baseplot_df <- ggplot(data = dat_anim_na) +
geom_point(aes(x=longitude,
y=latitude,
color = daytime),
size=0.01, alpha=0.5)   +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Telemetry data") + theme_bw()
baseplot_df
baseplot_sf <- ggplot(data = mydf_sf_trans) +
geom_sf(aes(color = daytime),size=0.01, alpha=0.5)   +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Telemetry data") + theme_bw()
baseplot_sf
# R data file - can only be opened/ read with R by using function load()
saveRDS(dat_anim_na, file = here('output/data-proc/tag5334_gps_proc.Rds'))
# interchange file format .csv
write.csv(dat_anim_na, file = here('output/data-proc/tag5334_gps_proc.csv'))
animal <- readRDS(file = here('output/data-proc/tag5334_gps_proc.Rds'))
animal
here
here()
library(here) #for easy directory management
library(sp)
library(dismo)
library(raster)
library(GISTools)
library(rgdal)    # retiring end of 2023 -> use stars/ terra /sf
library(maptools) # retiring end of 2023 -> use sp
library(rgeos)    # retiring end of 2023 -> use sf
library(rgl)
library(rasterVis)
library(adehabitatHR)  #adehabitatLT  #adehabitatMA
library(sf)
library(move)
library(plotly)
library(circular)
library(dplyr)
library(tmap)
library(viridis)
library(gganimate)
library(ggplot2)
library(moveVis)
library(ggmap)
library(maps)
library(mapproj)
library(devtools)
library(lubridate)
library(here)
library(glue)
library(cowplot)
library(tidyverse)
library(Cairo)
library(colorspace)
library(ragg)
library(ggtext)
library(pdftools)
library(units)
library(ggplot2)
library(patchwork) # to combine plots
library(leaflet)
here::here()
lf <- list.files(path=here("data-raw"), full.names=TRUE)
lf
# check the difference, and note: full.names was set to FALSE
list.files(path=here("data-raw"),pattern='gps',full.names=FALSE)
dat_anim <- read.table(file=lf[2], header=TRUE, fill=TRUE, sep=',')
dat_anim[1:5,] # recap: head(dat_anim) also works
dat_anim
# check the difference, and note: full.names was set to FALSE
list.files(path=here("data-raw"),pattern='gps',full.names=FALSE)
# check the difference, and note: full.names was set to FALSE
thefile <- list.files(path=here("data-raw"),pattern='gps',full.names=FALSE)
# check the difference, and note: full.names was set to FALSE
thefile <- list.files(path=here("data-raw"),pattern='gps',full.names=FALSE)
thefile
lf <- list.files(path=here("data-raw"), full.names=TRUE)
lf
# check the difference, and note: full.names is set to FALSE
thefile <- list.files(path=here("data-raw"),pattern='gps',full.names=FALSE)
thefile
# ...and here to TRUE
thefullfile <- list.files(path=here("data-raw"),pattern='gps',full.names=TRUE)
thefullfile
which(lf == thefullfile)
# let's get the number of the list in lf that corresponds with the filename.
# Tip of the day: always code everything you can, do not insert numbers or filenames
# by hand, i.e. lf[2]. If you for example add new data, the numbering changes!
lf_number <- which(lf == thefullfile)
dat_anim <- read.table(file=lf[lf_number], header=TRUE, fill=TRUE, sep=',')
dat_anim
dat_anim[1:5,] # recap: head(dat_anim) also works
library(here); library(sf); library(ggplot2); library(ggmap); library(leaflet);
library(tmap)
animal <- read.table(file = "https://github.com/stephkramer/Course4_MoveQ/blob/main/output/data-proc/tag5334_gps_proc.csv")
library(here); library(sf); library(ggplot2); library(ggmap); library(leaflet);
library(tmap)
here()
# animal <- readRDS(file = here('output/data-proc/tag5334_gps_proc.Rds'))
animal <- readRDS(file = 'C:/Users/kramer\PopDynIZW Dropbox/Steph Kramer/_GitHub/Course4_MoveQ/data-proc/tag5334_gps_proc.Rds'))
# transform into spatial simple feature sf object
mydf_sf <- st_as_sf(x = data.frame(animal),
coords = c("longitude", "latitude"),
crs = 4326,
sf_column_name = "geometry" )
# and project
mydf_sf_trans <-  st_transform(mydf_sf, 5631 )  # EPSG-code Pulkovo
animal <- readRDS(file = 'C:/Users/kramer\PopDynIZW Dropbox/Steph Kramer/_GitHub/Course4_MoveQ/data-proc/tag5334_gps_proc.Rds')
animal <- readRDS(file = 'C:/Users/kramer/PopDynIZW Dropbox/Steph Kramer/_GitHub/Course4_MoveQ/data-proc/tag5334_gps_proc.Rds')
animal <- readRDS(file = 'C:/Users/kramer/PopDynIZW Dropbox/Steph Kramer/_GitHub/Course4_MoveQ/output/data-proc/tag5334_gps_proc.Rds')
animal <- readRDS(file = here('output/data-proc/tag5334_gps_proc.Rds'))
# animal <- readRDS(file = 'C:/Users/kramer/PopDynIZW Dropbox/Steph #Kramer/_GitHub/Course4_MoveQ/output/data-proc/tag5334_gps_proc.Rds')
# transform into spatial simple feature sf object
mydf_sf <- st_as_sf(x = data.frame(animal),
coords = c("longitude", "latitude"),
crs = 4326,
sf_column_name = "geometry" )
# and project
mydf_sf_trans <-  st_transform(mydf_sf, 5631 )  # EPSG-code Pulkovo
lf <- list.files(path=here("data-raw"), full.names=TRUE)
lf
# check the difference, and note: full.names is set to FALSE
thefile <- list.files(path=here("data-raw"),pattern='gps',full.names=FALSE)
thefile
# ...and here to TRUE
thefullfile <- list.files(path=here("data-raw"),pattern='gps',full.names=TRUE)
thefullfile
# let's get the number of the list in lf that corresponds with the filename.
# Tip of the day: always code everything you can, do not insert numbers or filenames
# by hand, i.e. lf[2]. If you for example add new data, the numbering changes!
lf_number <- which(lf == thefullfile)
dat_anim <- read.table(file=lf[lf_number], header=TRUE, fill=TRUE, sep=',')
# let's get the number of the list in lf that corresponds with the filename.
# Tip of the day: always code everything you can, do not insert numbers or filenames
# by hand, i.e. lf[2]. If you for example add new data, the numbering changes!
lf_number <- which(lf == thefullfile)
dat_anim <- read.table(file=lf[lf_number], header=TRUE, fill=TRUE, sep=',')
# check the difference, and note: full.names is set to FALSE
thefile <- list.files(path=here("data-raw"),pattern='gps',full.names=FALSE)
thefile
# ...and here to TRUE
thefullfile <- list.files(path=here("data-raw"),pattern='gps',full.names=TRUE)
thefullfile
# let's get the number of the list in lf that corresponds with the filename.
# Tip of the day: always code everything you can, do not insert numbers or filenames
# by hand, i.e. lf[2]. If you for example add new data, the numbering changes!
lf_number <- which(lf == thefullfile)
dat_anim <- read.table(file=lf[lf_number], header=TRUE, fill=TRUE, sep=',')
dat_anim <- read.table(file=thefullfile, header=TRUE, fill=TRUE, sep=',')
dat_anim[1:5,] # recap: head(dat_anim) also works
# if the latitude-entry is missing, the longitude value will also be missing
# so it is enough to only check the latitude
which(is.na(dat_anim$latitude)) #there are a lot of missing values in the locations
dat_anim_na <- dat_anim[!is.na(dat_anim$latitude),] #alternatively, use complete.cases()
which(is.na(dat_anim_na$longitude)) # none
# define date-time format - the format is year-month-day_hour:min:sec:
dat_anim_na$start.timestamp <- ymd_hms(dat_anim_na$start.timestamp, tz="Europe/Berlin")
# let's get the number of the list in lf that corresponds with the filename.
# Tip of the day: always code everything you can, do not insert numbers or filenames
# by hand, i.e. lf[2]. If you for example add new data, the numbering changes!
lf_number <- which(lf == thefullfile)
dat_anim <- read.table(file=lf[lf_number], header=TRUE, fill=TRUE, sep=',')
# or, since with 'thefullfile' you gave the complete path, you can also directly load it
#dat_anim <- read.table(file=thefullfile, header=TRUE, fill=TRUE, sep=',')
dat_anim[1:5,] # recap: head(dat_anim) also works
# if the latitude-entry is missing, the longitude value will also be missing
# so it is enough to only check the latitude
which(is.na(dat_anim$latitude)) #there are a lot of missing values in the locations
dat_anim_na <- dat_anim[!is.na(dat_anim$latitude),] #alternatively, use complete.cases()
which(is.na(dat_anim_na$longitude)) # none
dat_anim_na$start.timestamp[1]
# have a look at the timestamp format, here the first row of the column star.timestamp
dat_anim_na$start.timestamp[1]
# define date-time format - the format is year-month-day_hour:min:sec:
dat_anim_na$start.timestamp <- ymd_hms(dat_anim_na$start.timestamp, tz="Europe/Berlin")
dat_anim_na$start.timestamp[1]
dat_anim_na$yearday <- yday(dat_anim_na$start.timestamp)
dat_anim_na$month   <- month(dat_anim_na$start.timestamp)
dat_anim_na$hour    <- hour(dat_anim_na$start.timestamp)
dat_anim_na$kweek   <- week(dat_anim_na$start.timestamp)
dat_anim_na$date    <- date(dat_anim_na$start.timestamp)
# crosscheck with
# head(dat_anim_na)
head(dat_anim_na)
# devtools::install_github("bgctw/solartime") # run only once
library(solartime)
dat_anim_na$sunrise   <- computeSunriseHour(timestamp = dat_anim_na$start.timestamp,
latDeg = dat_anim_na$latitude,
longDeg = dat_anim_na$longitude)
dat_anim_na$sunset    <- computeSunsetHour(dat_anim_na$start.timestamp,
dat_anim_na$latitude,
dat_anim_na$longitude)
dat_anim_na$daylength <- computeDayLength(dat_anim_na$start.timestamp,dat_anim_na$latitude)
dat_anim_na$daytime   <- computeIsDayByLocation(dat_anim_na$start.timestamp,
dat_anim_na$latitude,
dat_anim_na$longitude)
# head(dat_anim_na)
head(dat_anim_na)
tmap_mode(mode = "plot")
tm_shape(shp = mydf_sf_trans)  + tm_dots(size = 0.01,
col = 'daytime',
alpha=0.5)
tmap_mode(mode = "plot")
tm_shape(shp = mydf_sf_trans)  + tm_dots(size = 0.01,
col = 'daytime',
alpha=0.5)
table(dat_anim_na$date)  #  there is a strange date - 2025-12-26
# Delete data row
delme <- which(dat_anim_na$date == '2025-12-26')
dat_anim_na[delme,]
dat_anim_na <- dat_anim_na[-delme,] # delete the strange date and
table(dat_anim_na$date)             # check again
plot(table(dat_anim_na$date))       # plot the number of fixes per day
plot(table(dat_anim_na$hour))       # plot the number of fixes per hour
# simple
timetoplot <- circular(dat_anim_na$hour%%24, # convert to 24 hrs
units="hours", template="clock24")
rose.diag(timetoplot, bin=24, col="blue",
main="Events by Hour (sqrt scale)", prop=3)
# with ggplot
# code adapted from https://gist.github.com/mattbaggott/4361381
ggplot(dat_anim_na,aes(x=hour,fill=daytime))+
geom_bar(breaks=seq(0,24),width = 2,colour="grey")+
coord_polar(start=0)+
theme_minimal()+
scale_fill_brewer()+
ylab("Count")+
ggtitle("Events by Time of day")+
scale_x_continuous("", limits=c(0,24),
breaks=seq(0,24),
labels=seq(0,24))
# transform into spatial simple feature sf object
mydf_sf <- st_as_sf(x = data.frame(dat_anim_na),
coords = c("longitude", "latitude"),
crs = 4326,
sf_column_name = "geometry" )
# transform into SpatialPointsDataFrame  - for crosschecking
mydf_sp <- as(mydf_sf, "Spatial")
# transform CRS to projected one in meter distance units
mydf_sf_trans <-  st_transform(mydf_sf, 5631 )  # EPSG-code Pulkovo
mydf_sp_trans <-  spTransform(mydf_sp, CRS("+init=epsg:5631"))
tmap_mode(mode = "view")
tm_shape(shp = mydf_sf_trans)  + tm_dots(size = 0.01,
col = 'daytime',
alpha=0.5)
# package names:
pkgs = c("here", "sp", "sf", "dismo", "raster", "GISTools",  "rgdal",
"maptools", "rgeos","rgl","rasterVis", "adehabitatHR", "move", "tmap",
"plotly", "circular","gganimate","moveVis", "ggmap", "maps", "mapproj",
"viridis","dplyr", "devtools","lubridate", "patchwork","gower,"
"colorspace","ragg", "ggtext","pdftools", "units", "leaflet",
"glue", "cowplot", "tidyverse", "ggplot2", "Cairo")
# install.packages(pkgs) # only run this line once for installing the packages!
# update.packages()
my_packages <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
my_packages
if(length(my_packages) > 0) install.packages(my_packages)
# package names:
pkgs = c("here", "sp", "sf", "dismo", "raster", "GISTools",  "rgdal",
"maptools", "rgeos","rgl","rasterVis", "adehabitatHR", "move", "tmap",
"plotly", "circular","gganimate","moveVis", "ggmap", "maps", "mapproj",
"viridis","dplyr", "devtools","lubridate", "patchwork","gower",
"colorspace","ragg", "ggtext","pdftools", "units", "leaflet",
"glue", "cowplot", "tidyverse", "ggplot2", "Cairo")
# install.packages(pkgs) # only run this line once for installing the packages!
# update.packages()
my_packages <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
my_packages
if(length(my_packages) > 0) install.packages(my_packages)
library(gower)
head(animal)
my_fox <- move(x=animal$longitude, y= animal$latitude,
time=as.POSIXct(animal$start.timestamp,format="%Y-%m-%d %H:%M:%S"),
proj= CRS("+proj=longlat"),data=animal,animal="FoxQvonStralau"  )
my_fox <- move(x=dat_anim_na$longitude, y= dat_anim_na$latitude,
time=as.POSIXct(dat_anim_na$start.timestamp,format="%Y-%m-%d %H:%M:%S"),
proj= CRS("+proj=longlat"),data=dat_anim_na,animal="FoxQvonStralau"  )
head(my_fox); nrow(my_fox)
unique(timestamps(my_fox))
timeLag(my_fox, unit = "mins") # varies a lot, but minimum here 20 min
?move
plot(my_fox, xlab="Longitude", ylab="Latitude", type="l", pch=16, lwd=0.5)
points(my_fox, pch=20, cex=0.5)
plot(my_fox, xlab="Longitude", ylab="Latitude", type="p", pch=16, lwd=0.5)
points(my_fox, pch=20, cex=0.5)
timeLag(my_fox, unit = "mins")[1:5] # varies a lot, but minimum here 20 min
min(timeLag(my_fox, units="mins"))
mean(timeLag(my_fox, units="mins"))
max(timeLag(my_fox, units="mins"))
turnang <- angle(my_fox)
turnang
max(turnang)
turnAngleGc
turnang <- turnAngleGc(my_fox)
turnang
min(turnang)
turnang <- angle(my_fox)
#turnang <- turnAngleGc(my_fox) # the same
rose.diag(turnang, bins=36,shrink=0.6,xlim=c(-2,2),ylim=c(-2,2),axes=T,prop=3,units='degrees')
steplength <- distance(my_fox) #know your units!
hist(steplength)
rose.diag(turnang, bins=36,shrink=0.6,xlim=c(-2,2),ylim=c(-2,2),axes=T,prop=3,units='degrees')
turnang <- angle(my_fox)
#turnang <- turnAngleGc(my_fox) # the same
hist(turnang)
steplength <- distance(my_fox) #know your units!
hist(steplength)
hist(turnang)
turnang <- angle(my_fox)
# turnang <- turnAngleGc(my_fox) # the same
hist(abs(turnang))
steplength <- distance(my_fox) #know your units!
hist(steplength)
hist(abs(turnang))
timeLag(my_fox, unit = "mins")[1:5] # varies a lot, but minimum here 20 min
min(timeLag(my_fox, units="mins"))
mean(timeLag(my_fox, units="mins"))
max(timeLag(my_fox, units="mins"))
root_wd <- setwd("C:/Users/kramer/PopDynIZW Dropbox/Steph Kramer/_GitHub")
dbor_wd     <- paste0(root_wd, "/", "_DataBorneo") ## the old way
#dbor_wd     <- here("_DataBorneo")
maps_wd   <- paste0(dbor_wd, "/BaseMaps") ## mind difference paste0() and paste()
recs_wd   <- paste(dbor_wd, "/BaseRecords", sep = '')
output_wd <- here("output")
if (!dir.exists(output_wd)) {dir.create(output_wd)}
filenames <- list.files(path = maps_wd)
head(x = filenames)
filenames
getwd()
dbor_wd
root_wd <- setwd("C:/Users/kramer/PopDynIZW Dropbox/Steph Kramer/_GitHub")
dbor_wd     <- paste0(root_wd, "/", "_DataBorneo") ## the old way
dbor_wd
root_wd <- setwd("C:/Users/kramer/PopDynIZW Dropbox/Steph Kramer/_GitHub")
dbor_wd     <- paste0(root_wd, "/", "_DataBorneo") ## the old way
#dbor_wd     <- here("_DataBorneo")
maps_wd   <- paste0(dbor_wd, "/BaseMaps") ## mind difference paste0() and paste()
recs_wd   <- paste(dbor_wd, "/BaseRecords", sep = '')
output_wd <- here("output")
if (!dir.exists(output_wd)) {dir.create(output_wd)}
filenames <- list.files(path = maps_wd)
head(x = filenames)
ras_bio_asc_01 <- rast(x = paste0(maps_wd, "/bio_asc_01.asc")) ## `raster()` with {raster}
## or use here:
ras_bio_asc_01 <- rast(x = here("_DataBorneo", "BaseMaps", "bio_asc_01.asc"))
Bor_mat <- ras_bio_asc_01  ## easy copying of whole maps
maps_wd
recs_wd
library(terra)
ras_bio_asc_01 <- rast(x = paste0(maps_wd, "/bio_asc_01.asc")) ## `raster()` with {raster}
## or use here:
ras_bio_asc_01 <- rast(x = here("_DataBorneo", "BaseMaps", "bio_asc_01.asc"))
Bor_mat <- ras_bio_asc_01  ## easy copying of whole maps
ras_bio_asc_01 <- rast(x = paste0(maps_wd, "/bio_asc_01.asc")) ## `raster()` with {raster}
Bor_mat <- ras_bio_asc_01  ## easy copying of whole maps
crs(ras_bio_asc_01)   ## crs = coordinate reference system. If empty, assign it!
crs(ras_bio_asc_01) <- crs("+proj=longlat +datum=WGS84")
crs(ras_bio_asc_01) <- "+proj=longlat +datum=WGS84"
crs(ras_bio_asc_01) <- "+init=epsg:4326"
library(terra) ## the "new" {raster} package
library(rgdal)
library(rgeos)
library(rasterVis)
## working with vector data
library(sf) ## the "new" {sp} package
library(stars)
## visualization
library(ggplot2)
library(tmap)
library(viridis) ## nice colour palettes
library(patchwork) ## to combine plots
library(units) ## handle measurement data
library(here) ## for easy directory management
crs(ras_bio_asc_01) <- crs("+proj=longlat +datum=WGS84")
head(x = filenames)
ras_bio_asc_24 <- rast(x = paste0(maps_wd, "/bio_asc_24.asc")) ## `raster()` in {raster}
## or use here:
# ras_bio_asc_24 <- rast(x = here("_DataBorneo", "BaseMaps", "bio_asc_24.asc"))
crs(ras_bio_asc_24)
crs(ras_bio_asc_24) <- crs(ras_bio_asc_01)
plot(x = ras_bio_asc_01)
ext(x = ras_bio_asc_01) ## `extent()` with {raster}
clip_extent <- ext(117.2, 117.45, 5.4, 5.5)
ras_bio_asc_01_cr <- crop(x = ras_bio_asc_01, y = clip_extent)
plot(ras_bio_asc_01_cr, col = viridis::inferno(10))
slope <- terrain(x = ras_bio_asc_24, v = "slope", unit = "radians", neighbors = 8) ## arg `v` called `opt` in {raster}
aspect <- terrain(x = ras_bio_asc_24, v = "aspect", unit = "radians", neighbors = 8) ## arg `v` called `opt` in {raster}
Bor_hs <- shade(slope, aspect, angle = 45, direction = 270) ## `hillShade()` in {raster}
plot(Bor_hs, col = grey(0:100/100), legend = FALSE)
df_bio_asc_01  <- terra::as.data.frame(ras_bio_asc_01, xy = TRUE)
class(df_bio_asc_01)
predictors <- rast(x = files.full[c(9, 12, 22, 24)]) ## `stack()` in {raster}
crs(predictors)
files.full <- list.files(path = maps_wd, pattern = '.asc$', full.names = TRUE)
# files.full # check also
files.full[1:3]
cells <- cellFromRowCol(object = ras_bio_asc_01_cr, row = 5, col = 1:3)
cells    ## returns cell ID number, the index / rownumber!
extract(x = ras_bio_asc_01_cr, y = cells) ## returns cell values!
plot(x = ras_bio_asc_01_cr)
xy <- xyFromCell(object = ras_bio_asc_01_cr, cell = cells)
xy
xy <- vect(xy) ## turn into SpatVector
my_dist <- distance(x = ras_bio_asc_01_cr, y = xy) ## `distanceFromPoints(object = ras_bio_asc_01_cr, xy = xy)` in {raster}
plot(x = my_dist) ## units?
points(xy)
xy_sf <- st_as_sf(x = xy,
coords = c("x","y"),
crs = 4326,
sf_column_name = "geometry" )
tmap_mode(mode = "plot")
tm_shape(shp = my_dist) +
tm_raster(n = 100, palette = rev(grDevices::terrain.colors(100)),
legend.show = FALSE) +
tm_shape(shp = xy_sf) +
tm_dots(size = 1)
xy_sf
xy_sf <- st_as_sf(x = xy, coords = c("x","y"),crs = 4326,sf_column_name = "geometry" )
xy_sf
st_crs(xy_sf) <- 4326
xy_sf
ras_bio_asc_01_cr
plot(ras_bio_asc_01_cr)
image(ras_bio_asc_01_cr)
plot(ras_bio_asc_01_cr)
plot(copy_ras)
copy_ras <- ras_bio_asc_01_cr
copy_ras[cells] <- 250
plot(x = copy_ras)
xy <- vect(xy) ## turn into SpatVector
my_dist <- distance(x = ras_bio_asc_01_cr, y = xy) ## `distanceFromPoints(object = ras_bio_asc_01_cr, xy = xy)` in {raster}
plot(x = my_dist) ## units?
?vect
xy
st_crs(xy) <- 4326
crs(xy)  <- "epsg:4326"
my_dist <- distance(x = ras_bio_asc_01_cr, y = xy) ## `distanceFromPoints(object = ras_bio_asc_01_cr, xy = xy)` in {raster}
plot(x = my_dist) ## units?
points(xy)
xy_sf <- st_as_sf(x = xy,
coords = c("x","y"),
crs = 4326)
xy_sf
?distance
library(terra)
library(sf)
## we can load the data directly from GitHub
path_wb <- "https://raw.githubusercontent.com/stephkramer/Course1_IntroR/master/data/data_wb_melden_en.csv"
path_temp <- "https://raw.githubusercontent.com/stephkramer/Course2_RSpatial/main/_DataBerlin/summer_temp_100m_3035.asc"
## alternatively load the local file
# path <- "path/to/your/data/folder/data_wb_melden_en.csv"
wb <- read.csv(file = path_wb)
raster_temp <- rast(x = path_temp)
wb
path_wb <- "https://raw.githubusercontent.com/stephkramer/Course1_IntroR/master/data/data_wb_melden_en.csv"
path_temp <- "https://raw.githubusercontent.com/stephkramer/Course2_RSpatial/main/_DataBerlin/summer_temp_100m_3035.asc"
## alternatively load the local file
# path <- "path/to/your/data/folder/data_wb_melden_en.csv"
wb <- read.csv(file = path_wb)
wb
library(terra)
library(sf)
## we can load the data directly from GitHub
path_wb <- "https://raw.githubusercontent.com/stephkramer/Course1_IntroR/master/data/data_wb_melden_en.csv"
path_temp <- "https://raw.githubusercontent.com/stephkramer/Course2_RSpatial/main/_DataBerlin/summer_temp_100m_3035.asc"
## alternatively load the local file
# path <- "path/to/your/data/folder/data_wb_melden_en.csv"
wb <- read.csv(file = path_wb)
raster_temp <- rast(x = path_temp)
wb
path_wb <- "https://raw.githubusercontent.com/stephkramer/Course1_IntroR/master/data/data_wb_melden_en.csv"
path_temp <- "https://raw.githubusercontent.com/stephkramer/Course2_RSpatial/main/_DataBerlin/summer_temp_100m_3035.asc"
## alternatively load the local file
# path <- "path/to/your/data/folder/data_wb_melden_en.csv"
wb <- read.csv(file = path_wb)
wb
path_wb <- "https://raw.githubusercontent.com/stephkramer/Course1_IntroR/master/data/data_wb_melden_en.csv"
path_temp <- "https://raw.githubusercontent.com/stephkramer/Course2_RSpatial/main/_DataBerlin/summer_temp_100m_3035.asc"
## alternatively load the local file
# path <- "path/to/your/data/folder/data_wb_melden_en.csv"
wb <- read.csv(file = path_wb)
wb
head(wb)
path_wb <- "https://raw.githubusercontent.com/stephkramer/Course1_IntroR/master/data/data_wb_melden_en.csv"
path_temp <- "https://raw.githubusercontent.com/stephkramer/Course2_RSpatial/main/_DataBerlin/summer_temp_100m_3035.asc"
## alternatively load the local file
# path <- "path/to/your/data/folder/data_wb_melden_en.csv"
wb <- read.csv(file = path_wb)
heaad(wb)
head(wb)
